<?php
# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}
$wgSessionName = ini_get('session.name');
$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

$wgDefaultUserOptions['enotifwatchlistpages'] = 1;

/* Removes 'application/zip' from blacklisted mime types */
$zipIndex = array_search("application/zip", $wgMimeTypeBlacklist);
array_splice($wgMimeTypeBlacklist, $zipIndex, 1);

$wgSkipSkins = array("cologneblue",  "nostalgia", "simple", "modern", "monobook", "myskin", "standard" );

/*LOCKING DOWN ENTIRE SITE */
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['user']['edit'] = false;
$wgGroupPermissions['sysop']['edit'] = false;

# Disable EDIT for everyone
$wgGroupPermissions['*']['edit']              = false;

# Disable for users, too: by default 'user' is allowed to edit, even if '*' is not.
//REGULAR USER PERMISSIONS
$wgGroupPermissions['user']['edit']           = true;
$wgGroupPermissions['user']['move']           = true;
$wgGroupPermissions['user']['delete']         = false;
$wgGroupPermissions['user']['undelete']       = true;
$wgGroupPermissions['user']['deletedhistory'] = true;

//LOCKDOWNPERMISSIONS
/*
$wgGroupPermissions['user']['edit']           = false;
$wgGroupPermissions['user']['move']           = false;
$wgGroupPermissions['user']['delete']         = false;
$wgGroupPermissions['user']['undelete']       = false;
$wgGroupPermissions['user']['deletedhistory'] = false;
*/

# $wgReadOnly = "Due to database maintenance GCPEDIA edits to pages have been disabled.";

# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '200M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

## Change default timezone and time offset for all users
##(TZoffset needs to be changed for daylight savings)
$wgLocaltimezone = "America/Montreal";
$wgLocalTZoffset = -240;

$wgSitename         = "GCpedia";
$wgServer="http://serverIP";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
$wgScriptPath       = "/gcwiki.gc.ca";
$wgScriptExtension  = ".php";
# $wgArticlePath      = '/wiki/$1';

/*************************************************************** GCCHANGES SECTION ************************************************/
$gc_site_path = $wgServer.$wgScriptPath;
$gc_include_path = "includes/gcpedia_changes";
#include($gc_include_path."/changes.php");
/************************************************************* END: GCCHANGES SECTION *********************************************/

$wgEmergencyContact = "admin.GCPEDIA@tbs-sct.gc.ca";
$wgPasswordSender = "admin.GCPEDIA@tbs-sct.gc.ca";

## For a detailed description of the following switches see
## http://www.mediawiki.org/wiki/Extension:Email_notification
## and http://www.mediawiki.org/wiki/Extension:Email_notification
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true;
$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailConfirmToEdit = true;
$wgEmailAuthentication = true;


# Database access credentials
$wgDBtype           = "DBtype";
$wgDBserver         = "DBserve";
$wgDBname           = "DBname";
$wgDBuser           = "DBuser";
$wgDBpassword       = "DBpassword";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

# Postgres specific settings
# $wgDBport           = "5432";
# $wgDBmwschema       = "mediawiki";
# $wgDBts2schema      = "public";

## Shared memory settings

$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();
$wgParserCacheType = CACHE_NONE;
$wgCachePages = false;
$wgUseFileCache = false; 
$wgFileCacheDirectory = "$IP/cache";
$wgShowIPinHeader = false;

## Show SQL Errors
$wgShowSQLErrors=true;

$wgPageShowWatchingUsers = true;
$wgAjaxWatch = false;

# When you make changes to this configuration file, this will make sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

# $wgUseImageMagick = true;
# $wgImageMagickConvertCommand = "/usr/bin/convert";

# Increase memory allocation for large image thumbnails
$wgMaxImageArea = 2.0e7;

## If you want to use image uploads under safe mode, create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;
$wgLocalInterwiki   = $wgSitename;
$wgLanguageCode = "en";

/**  Whether to allow inline image pointing to other websites */
$wgAllowExternalImages = true;
$wgDefaultSkin = 'gcvector';

$wgLogo = $wgScriptPath . "/images/200701-235-globe_logo_155x200.png";
#$wgLogoEn = $wgScriptPath . "/images/200701-235-globe_logo_155x200.png";
#$wgLogoFr = $wgScriptPath . "/images/Globe_Logo_FR.png";

## For attaching licensing metadata to pages, and displaying an appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";


## To enable image uploads, make sure the 'images' directory is writable, then set this to true:
$wgEnableUploads       = true;

/** $wgFileExtensions = array( 'png','gif','jpg','jpeg','pdf','xls','doc','zip','ppt','svg','xml','mpg','swf','mp3','wmv','odp','odt'); */
$wgFileExtensions = array('png','gif','jpg','jpeg','pdf','xls','docx','pptx','doc','ppt','svg','xml','mpg','swf','odp','odt','wmv','flv','vsd','mpp','ai','zip','txt','wpd','rtf','drf','xlsx','mp4','webm');

# Code to allow MSOffice mime types (zip) to be saved. 
# $wgVerifyMimeType = false;
$wgAllowJavaUploads = true;

$wgBreakFrames = false;

$wgMaxUploadSize = 1024*1024*125;
$wgUploadSizeWarning = 0;

$wgPasswordReminderResendTime = 1;

# To enable displayed menu structure when creating sub-pages
$wgNamespacesWithSubpages = array_fill(0, 100, true);

$wgAllowUserCss = true;
$wgAllowUserJs  = true;

$wgExtraNamespaces[100] = "Portal";
$wgExtraNamespaces[101] = "Portal_Talk";
$wgNamespacesWithSubpages[100] = true;
$wgNamespacesWithSubpages[101] = true;

$wgExtraNamespaces[102] = "Community";
$wgExtraNamespaces[103] = "Community_Talk";
$wgNamespacesWithSubpages[102] = true;
$wgNamespacesWithSubpages[103] = true;

# $wgNamespaceProtection[100] = Array("editPortal");
# $wgGroupPermissions['*']['editPortal'] = false;
# $wgGroupPermissions['sysop']['editPortal'] = true;

$wgVectorUseSimpleSearch = true;
$wgCategoryPagingLimit = 300;

# Set to false from 'DENY' to allow GCPEDIA to be within frames
# Changed due to single-login
# $wgEditPageFrameOptions = false;

# MESF Changes
$wgRawHtml = true;
$wgUseAjax = true;

// default serchable namespaces
$wgNamespacesToBeSearchedDefault = array(
	NS_MAIN =>           true,
	NS_TALK =>           false,
	NS_USER =>           false,
	NS_USER_TALK =>      false,
	NS_PROJECT =>        false,
	NS_PROJECT_TALK =>   false,
	NS_FILE =>           false,
	NS_FILE_TALK =>      false,
	NS_MEDIAWIKI =>      false,
	NS_MEDIAWIKI_TALK => false,
	NS_TEMPLATE =>       false,
	NS_TEMPLATE_TALK =>  false,
	NS_HELP =>           true,
	NS_HELP_TALK =>      false,
	NS_CATEGORY =>       false,
	NS_CATEGORY_TALK =>  false
);

## Extentions -----------------------------------------------

require_once( "$IP/extensions/HTML5video/HTML5video.php" );

require_once( "$IP/extensions/UniversalLanguageSelector/UniversalLanguageSelector.php" );

# GC_Messages - language extension to avoid mofidying core
# require_once( "$IP/extensions/GC_Messages/GC_Messages.php" );

require_once( "$IP/extensions/NewUserPage/NewUserPage.php" );

# Custom GC login/create account page
# include("extensions/customLogin/customLogin.php");

## SemanticMediaWiki 
# Validator
require_once( "$IP/extensions/Validator/Validator.php" );
#$smwgNamespaceIndex = 104;
#include_once( "$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php" );
#enableSemantics('$wgServer/gcpedia.gc.ca');
# include_once("$IP/extensions/SemanticForms/SemanticForms.php");

require_once($IP.'/extensions/InputBox/InputBox.php');

require_once("extensions/StubManager/StubManager.php");

require_once("$IP/extensions/SecureHTML/SecureHTML.php");

require_once("extensions/tag_cloud.php");

require_once("extensions/recentItems.php");

## Video Enableing Extensions
require_once("$IP/extensions/FramedVideo/FramedVideo.php");
include_once('extensions/wikiFlvPlayer/wikiFlvPlayer.php');
require_once('extensions/ExtVideo/ExtVideo.php');

require_once($IP.'/extensions/MagicNoNumberedHeadings/MagicNoNumberedHeadings.php');

require_once($IP.'/extensions/MagicNumberedHeadings/MagicNumberedHeadings.php');

# require_once( "$IP/extensions/Glossary/Glossary.php" );

include("$IP/extensions/NewUserMessage/NewUserMessage.php");

require_once("$IP/extensions/ParserFunctions/ParserFunctions.php");

# Extention that allows the merging and deleteing of users (SYSOP and Bureaucrat only)
require_once( "extensions/UserMerge/UserMerge.php" );
# $wgGroupPermissions['bureaucrat']['usermerge'] = true;
$wgGroupPermissions['sysop']['usermerge'] = true;
$wgUserMergeUnmergeable = array( 'sysop', 'awesomeusers' );

require_once("$IP/extensions/Renameuser/SpecialRenameuser.php");

require_once( $IP.'/extensions/Cite/Cite.php' );

require_once( "$IP/extensions/Multilang/multilang.php" );

## LookupUser
require_once("$IP/extensions/LookupUser/LookupUser.php");
$wgGroupPermissions['*']['lookupuser'] = false;
$wgGroupPermissions['sysop']['lookupuser'] = true;

require_once("$IP/extensions/EditUser/EditUser.php");

require_once("{$IP}/extensions/Poll/Poll.php");

require_once("{$IP}/extensions/GC_Poll/Poll.php");

require_once("$IP/extensions/GC_Extention/GC_Extention.php");

include("$IP/extensions/CSS/CSS.php");

require_once( "$IP/extensions/GCRandomImage/GCRandomImage.php" );

/* Disclaimer */
require_once("$IP/extensions/GC_Disclaimer/disclaimer.php");
$wgDisclaimReset = 10; //time to reset disclaimer, in days

require_once("$IP/extensions/ImageMap/ImageMap.php");
$wgImageMapAllowExternalLinks = true;

## Awards
require_once("$IP/extensions/awards/awards.php");
$wgEnableAPI = true;
$wgEnableWriteAPI = true;

include("$IP/extensions/DynamicPageList/DynamicPageList.php");

$wgEnableMWSuggest = true;

/* See: GCPEDIA:Development/MasterLog/Extensions/PasswordReset_Disabled for details */
#require_once( "$IP/extensions/PasswordReset/PasswordReset.php" );
#$wgGroupPermissions['sysop']['passwordreset']   = true;

include("$IP/extensions/TreeAndMenu/TreeAndMenu.php");

## CategoryTree
require_once("$IP/extensions/CategoryTree/CategoryTree.php");
$wgCategoryTreeAllowTag = false;
$wgCategoryTreeCategoryPageOptions['mode'] = 'pages';

require_once( "$IP/extensions/CategoryWatch/CategoryWatch.php" );

# Google Analytics 
require_once( "$IP/extensions/googleAnalytics/googleAnalytics.php" );
# Replace xxxxxxx-x with YOUR GoogleAnalytics UA number
# $wgGoogleAnalyticsAccount = "xxxxxxx-x";

## Widgets
require_once("$IP/extensions/Widgets/Widgets.php");
$wgGroupPermissions['sysop']['editwidgets'] = true;
# $wgGroupPermissions['widgeteditor']['editwidgets'] = true;

require_once("$IP/extensions/EmailUpdate/EmailUpdate.php");
$wgGroupPermissions['sysop']['emailupdate'] = true;

#### GCVector Extention - Enhancements for the skin (Usability Initiative)
require_once( "$IP/extensions/GCVector/GCVector.php" );
# $wgGCVectorFeatures['editwarning']['global'] = false;
$wgGCVectorFeatures['editwarning']['user'] = true;
$wgGCVectorFeatures['collapsibletabs']['global'] = false;
$wgGCVectorFeatures['collapsibletabs']['user'] = true;
$wgGCVectorFeatures['collapsiblenav']['global'] = true;
$wgGCVectorFeatures['collapsiblenav']['user'] = true;
$wgGCVectorFeatures['footercleanup']['global'] = false;
$wgGCVectorFeatures['footercleanup']['user'] = false;
$wgGCVectorFeatures['expandablesearch']['global'] = false;
$wgGCVectorFeatures['expandablesearch']['user'] = false;
$wgGCVectorUseSimpleSearch = true;
require_once( "$IP/skins/GCVector.php" );

require_once( "$IP/extensions/WikiEditor/WikiEditor.php" );
$wgDefaultUserOptions['usebetatoolbar'] = 1;
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 0;
$wgDefaultUserOptions['wikieditor-preview'] = 0;

require_once( "$IP/extensions/GC_PreferenceAdjust/GC_PreferenceAdjust.php" );
if ( !isset($_COOKIE["wikiEditor-0-toolbar-section"]) )
		setcookie("wikiEditor-0-toolbar-section", "advanced", time()+60*60*24*30, "/");

// Support for Code Syntax Highlighing
# require_once("extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php");
# $wgSyntaxHighlightDefaultLang = "html4strict";

# make it possible for sysops to mass delete pages
###### require_once("$IP/extensions/Nuke/Nuke.php");

require_once( "$IP/extensions/ReplaceText/ReplaceText.php" );
$wgGroupPermissions['bureaucrat']['replacetext'] = true;

/* FCKeditor */
#require_once( "extensions/FCKeditor/FCKeditor.php" );
#$wgFCKEditorToolbarSet = "Wiki";

# Add a Star icon for selecting favorites:
# $wgUseIconFavorite = true; 
# Add a "My Favorites" link to the personal URLs area:
$wgFavoritesPersonalURL = true;
require_once("$IP/extensions/Favorites/Favorites.php");

## GCpedia custom create account and login
require_once("$IP/extensions/customUserCreateForm/customUserCreateForm.php");
require_once("$IP/extensions/customUserCreateForm/GCpedia AJAX/AJAXtest.php");
require_once("$IP/extensions/customUserCreateForm/GCpedia AJAX/DomainSelector.php");
require_once("$IP/extensions/GCFindUsername/AJAXuser.php");
## end GCpedia custom create account and login

require_once("extensions/AjaxShowEditors/AjaxShowEditors.php"); 

// Delete File Extension (modified DeletePagePermanently)
require_once( "$IP/extensions/DeleteFilePermanently/DeleteFilePermanently.php");
$wgGroupPermissions['*']         ['deleteperm'] = false;
$wgGroupPermissions['user']      ['deleteperm'] = false;
$wgGroupPermissions['bureaucrat']['deleteperm'] = true;
$wgGroupPermissions['sysop']     ['deleteperm'] = false;
$wgGroupPermissions['IMadmin']   ['deleteperm'] = true;
$wgGroupPermissions['IMadmin']   ['delete'] = true;
$wgGroupPermissions['IMadmin']   ['undelete'] = true;

/// GC Mobile
require_once("$IP/extensions/MobileFrontend/MobileFrontend.php");
require_once("$IP/extensions/Mobile_Detect/Mobile_Detect.php");

// require_once("$IP/skins/gcsimple/gcsimple.php");
if (!isset($_COOKIE['mf_mobileFormat'])){
  $detect = new Mobile_Detect();
  if( !isset( $_GET['mobileaction'] ) && $detect->isMobile() ) {
    setcookie('mf_mobileFormat', 'true', time()+60*60*24*31, "/" );
    // required to ensure cookie is recognized right away
    $_COOKIE['mf_mobileFormat'] = 'true';
#    header('Location: http://www.gcpedia.gc.ca/wiki/Main_Page/');
    }
}
// end mobile

/*
require_once("$IP/extensions/ROTedits/ROTedits.php");
*/
require_once "$IP/extensions/SimpleSamlAuth/SimpleSamlAuth.php";

// SAML_OPTIONAL // SAML_LOGIN_ONLY // SAML_REQUIRED //
$wgSamlRequirement = SAML_OPTIONAL;
// Should users be created if they don't exist in the database yet?
$wgSamlCreateUser = true;

// SAML attributes
$wgSamlUsernameAttr = 'GCPedia_user';
$wgSamlRealnameAttr = 'cn';
$wgSamlMailAttr = 'GCPedia_email';

// SimpleSamlPhp settings
$wgSamlSspRoot = '/opt/lampp/htdocs/simplesamlphp';
$wgSamlAuthSource = 'elgg-idp';
$wgSamlPostLogoutRedirect = NULL;

// Array: [MediaWiki group][SAML attribute name][SAML expected value]
// If the SAML assertion matches, the user is added to the MediaWiki group
$wgSamlGroupMap = array(
   'sysop' => array(
        'groups' => array('admin'),
    ),
);


?>
